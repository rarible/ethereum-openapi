openapi: 3.0.3
info:
  title: OpenAPI definition
  version: v0.1

paths:

  ######################### Sign API #########################

  "/v0.1/signature/x2y2/order":
    post:
      tags:
        - order-signature-controller
      operationId: orderSignX2Y2
      description: Fetch x2y2 order sign
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/X2Y2OrderSignRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/X2Y2SignResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/signature/x2y2/cancel":
    post:
      tags:
        - order-signature-controller
      operationId: cancelSignX2Y2
      description: Fetch x2y2 cancel sign
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/X2Y2GetCancelInputRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/X2Y2SignResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/signature/seaport/simple/{hash}":
    get:
      tags:
        - order-signature-controller
      operationId: getSeaportOrderSignature
      description: Fetch Seaport order signature
      parameters:
        - name: hash
          description: "Hash of the Seaport order"
          in: path
          required: true
          schema:
            type: string
          example: 0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeaportFulfillmentSimpleResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/signature/validate":
    post:
      tags:
        - order-signature-controller
      operationId: validate
      description: Validation of the order signature
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EthereumSignatureValidationForm"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ####################### Encoder API ########################

  "/v0.1/encoder/order":
    post:
      tags:
        - order-encode-controller
      operationId: encodeOrder
      deprecated: true
      description: Deprecated. Use Rarible Protocol Ethereum SDK https://github.com/rarible/ethereum-sdk/tree/master
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderForm"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncodedOrder"
        '400':
          $ref: "#/components/responses/OrderDataApiError"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/encoder/data":
    post:
      deprecated: true
      description: This method should not be used and will be removed soon
      tags:
        - order-encode-controller
      operationId: encodeOrderData
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderData"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncodedOrderData"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/encoder/assetType":
    post:
      deprecated: true
      description: This method should not be used and will be removed soon
      tags:
        - order-encode-controller
      operationId: encodeOrderAssetType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetType"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncodedOrderData"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ####################### Order Settings API ########################

  "/v0.1/orders/settings/fees":
    get:
      tags:
        - order-settings-controller
      description: "Returns set fees for different order types"
      operationId: getFees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EthOrderFees"
        '500':
          $ref: "#/components/responses/ServerError"

  ####################### Orders API ########################

  "/v0.1/orders":
    post:
      tags:
        - order-controller
      description: Create or update order
      operationId: upsertOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderForm"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '400':
          $ref: "#/components/responses/OrderUpdateApiError"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/{hash}/prepareTx":
    post:
      tags:
        - order-controller
      description: Prepare order transaction.
      operationId: prepareOrderTransaction
      parameters:
        - name: hash
          description: "Hash of the order"
          in: path
          required: true
          schema:
            type: string
          example: 0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrepareOrderTxForm"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrepareOrderTxResponse"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/{hash}/prepareCancelTx":
    post:
      tags:
        - order-controller
      description: Prepare order for cancel transaction
      operationId: prepareOrderCancelTransaction
      parameters:
        - name: hash
          description: "Hash of the order"
          in: path
          required: true
          schema:
            type: string
          example: 0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --request POST \
            --url 'https://ethereum-api.rarible.org/v0.1/order/orders/0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0/prepareCancelTx'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreparedOrderTx"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/{hash}":
    get:
      tags:
        - order-controller
      description: Returns the order by order hash
      operationId: getOrderByHash
      parameters:
        - name: hash
          description: "Hash of the order"
          in: path
          required: true
          schema:
            type: string
          example: 0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --request GET \
            --url 'https://ethereum-api.rarible.org/v0.1/order/orders/0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/{hash}/validated":
    get:
      tags:
        - order-controller
      description: Returns validated order by order hash
      operationId: getValidatedOrderByHash
      parameters:
        - name: hash
          description: "Hash of the order"
          in: path
          required: true
          schema:
            type: string
          example: 0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --request GET \
            --url 'https://ethereum-api.rarible.org/v0.1/order/orders/0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0/validated'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/{hash}/report":
    post:
      tags:
        - order-controller
      description: Report not working order
      operationId: reportOrder
      parameters:
        - name: hash
          description: "Hash of the order"
          in: path
          required: true
          schema:
            type: string
          example: 0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --request POST \
            --url 'https://ethereum-api.rarible.org/v0.1/order/orders/0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0/report'
      responses:
        '200':
          description: OK
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/{hash}/updateMakeStock":
    get:
      tags:
        - order-controller
      description: Update stock of the order by order hash
      operationId: updateOrderMakeStock
      parameters:
        - name: hash
          description: "Hash of the order"
          in: path
          required: true
          schema:
            type: string
          example: 0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --request GET \
            --url 'https://ethereum-api.rarible.org/v0.1/order/orders/0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0/updateMakeStock'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/buyerFeeSignature":
    post:
      tags:
        - order-controller
      description: Buyer's signature for a fee
      operationId: buyerFeeSignature
      parameters:
        - name: fee
          description: "Fee value for operation"
          in: query
          required: true
          schema:
            type: integer
            minimum: 0
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderForm"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Binary"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ####################### Orders-Search API ########################

  "/v0.1/orders/all":
    get:
      deprecated: true
      tags:
        - order-controller
      description: Returns all orders by specified parameters
      operationId: getOrdersAll
      parameters:
        - name: origin
          description: "Address of the consumer to receive the commission for order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: platform
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of orders to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/amm/byItem":
    get:
      tags:
        - order-controller
      operationId: getAmmOrdersByItem
      description: Returns all AMM orders by item and order status
      parameters:
        - name: contract
          description: "Address of the contract"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: tokenId
          description: "Token identifier"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/BigInteger"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of items to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/amm/{hash}/holdItemIds":
    get:
      tags:
        - order-controller
      description: Returns all item ida hold by AMM order
      operationId: getAmmOrderItemIds
      parameters:
        - name: hash
          description: "Hash of the AMM order"
          in: path
          required: true
          schema:
            type: string
          example: 0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of item ids to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HoldNftItemIds"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/amm/{hash}/buyInfo":
    get:
      tags:
        - order-controller
      description: Get for buy pricing info from AMM
      operationId: getAmmBuyInfo
      parameters:
        - name: hash
          description: "Hash of the AMM order"
          in: path
          required: true
          schema:
            type: string
          example: 0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0
        - name: numNFTs
          description: "The number of NFTs to buy from the AMM order"
          in: query
          required: true
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AmmTradeInfo"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/byIds":
    post:
      deprecated: true
      tags:
        - order-controller
      description: Returns all orders by order hash
      operationId: getOrdersByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderIds"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/byOrderIds":
    post:
      tags:
        - order-controller
      description: Returns all orders by order hash
      operationId: getByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderIds"
        required: true
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sell/byMakerAndByStatus":
    get:
      tags:
        - order-controller
      operationId: getSellOrdersByMakerAndByStatus
      description: Returns all orders for sale by maker and order status
      parameters:
        - name: maker
          description: "The maker of the order"
          in: query
          required: true
          schema:
            type: array
            minItems: 1
            items:
              $ref: "#/components/schemas/Address"
        - name: origin
          description: "Address of the consumer to receive the commission for order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: platform
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of items to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: status
          description: "The order status"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderStatus"
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sell/byItem":
    get:
      deprecated: true
      tags:
        - order-controller
      description: Returns all orders for sale by item
      operationId: getSellOrdersByItem
      parameters:
        - name: contract
          description: "Address of the contract"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: tokenId
          description: "Token identifier"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/BigInteger"
        - name: maker
          description: "The maker of the order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: origin
          description: "Address of the consumer to receive the commission for order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: platform
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of orders to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sell/byItemAndByStatus":
    get:
      tags:
        - order-controller
      operationId: getSellOrdersByItemAndByStatus
      description: Returns all orders for sale by item and order status
      parameters:
        - name: contract
          description: "Address of the contract"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: tokenId
          description: "Token identifier"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/BigInteger"
        - name: maker
          description: "The maker of the order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: origin
          description: "Address of the consumer to receive the commission for order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: platform
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of items to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: status
          description: "The order status"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: currencyId
          in: query
          required: false
          description: "This parameter will be required in future releases."
          schema:
            $ref: "#/components/schemas/Address"
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/currencies/bySellOrdersOfItem":
    get:
      tags:
        - order-controller
      operationId: getCurrenciesBySellOrdersOfItem
      description: Returns currencies taken as payment in all sell orders of the item
      parameters:
        - name: contract
          description: "Address of the contract"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: tokenId
          description: "Token identifier"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/BigInteger"
        - name: status
          description: "The order status"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderStatus"
      responses:
        '200':
          $ref: "#/components/responses/OrderCurrenciesPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/currencies/byBidOrdersOfItem":
    get:
      tags:
        - order-controller
      operationId: getCurrenciesByBidOrdersOfItem
      description: Returns currencies made as payment in all bid orders of the item
      parameters:
        - name: contract
          description: "Address of the contract"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: tokenId
          description: "Token identifier"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/BigInteger"
        - name: status
          description: "The order status"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderStatus"
      responses:
        '200':
          $ref: "#/components/responses/OrderCurrenciesPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sell/byCollection":
    get:
      deprecated: true
      tags:
        - order-controller
      description: Returns all orders for sale by collection
      operationId: getSellOrdersByCollection
      parameters:
        - name: collection
          description: "Address of the NFT collection"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: origin
          description: "Address of the consumer to receive the commission for order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: platform
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of orders to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sell/byCollectionAndByStatus":
    get:
      tags:
        - order-controller
      operationId: getSellOrdersByCollectionAndByStatus
      description: Returns all orders for sale by collection and order status
      parameters:
        - name: collection
          description: "Address of the NFT collection"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: origin
          description: "Address of the consumer to receive the commission for order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: platform
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of items to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: status
          description: "The order status"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderStatus"
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sell":
    get:
      deprecated: true
      tags:
        - order-controller
      description: Returns all orders for sale by specified parameters
      operationId: getSellOrders
      parameters:
        - name: origin
          description: "Address of the consumer to receive the commission for order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: platform
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of orders to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sellByStatus":
    get:
      tags:
        - order-controller
      operationId: getSellOrdersByStatus
      description: Returns all orders for sale by order status
      parameters:
        - name: origin
          description: "Address of the consumer to receive the commission for order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: platform
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of items to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: status
          description: "The order status"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: sort
          description: "Sorting by last update"
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/OrderSort"
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ###################### Bids ######################

  "/v0.1/orders/bids/byMakerAndByStatus":
    get:
      tags:
        - order-controller
      operationId: getOrderBidsByMakerAndByStatus
      description: Returns all order bids by maker and order status
      parameters:
        - name: maker
          description: "The maker of the order"
          in: query
          required: true
          schema:
            type: array
            minItems: 1
            items:
              $ref: "#/components/schemas/Address"
        - name: origin
          description: "Address of the consumer to receive the commission for order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: platform
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of orders to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: status
          description: "The order status"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: currencyIds
          in: query
          required: false
          description: "Bid currencies"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Address"
        - name: startDate
          description: "Lower time border of data (unix format)"
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: endDate
          description: "Upper time border of data (unix format)"
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/bids/byItem":
    get:
      deprecated: true
      tags:
        - order-controller
      description: Returns all order bids by item
      operationId: getOrderBidsByItem
      parameters:
        - name: contract
          description: "Address of the contract"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: tokenId
          description: "Token identifier"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/BigInteger"
        - name: maker
          description: "The maker of the order"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Address"
        - name: origin
          description: "Address of the consumer to receive the commission for order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: platform
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of orders to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/bids/byItemAndByStatus":
    get:
      tags:
        - order-controller
      operationId: getOrderBidsByItemAndByStatus
      description: Returns all order bids by item and order status
      parameters:
        - name: contract
          description: "Address of the contract"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: tokenId
          description: "Token identifier"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/BigInteger"
        - name: maker
          description: "The maker of the order"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Address"
        - name: origin
          description: "Address of the consumer to receive the commission for order"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: platform
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of orders to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: status
          description: "The order status"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: currencyId
          in: query
          required: false
          description: "This parameter will be required in future releases."
          schema:
            $ref: "#/components/schemas/Address"
        - name: startDate
          description: "Lower time border of data (unix format)"
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: endDate
          description: "Upper time border of data (unix format)"
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sync":
    get:
      tags:
        - order-controller
      description: Returns all orders with dbUpdatedAt sorting
      operationId: getAllSync
      parameters:
        - name: sort
          description: "Sorting by data base update"
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/SyncSort"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of orders to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/all/byStatus":
    get:
      tags:
        - order-controller
      description: Returns all orders with status sorting
      operationId: getOrdersAllByStatus
      parameters:
        - name: sort
          description: "Sorting by last update"
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/OrderSort"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of orders to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: status
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderStatus"
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"
  "/v0.1/bids/byItem":
    get:
      deprecated: true
      tags:
        - order-bid-controller
      operationId: getBidsByItem
      parameters:
        - name: contract
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: tokenId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/BigInteger"
        - name: status
          in: query
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderBidStatus"
        - name: maker
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Address"
        - name: origin
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Address"
        - name: platform
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: continuation
          in: query
          required: false
          schema:
            type: string
        - name: size
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          $ref: "#/components/responses/OrderBidsPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ###################### Transactions ######################

  "/v0.1/transactions":
    post:
      tags:
        - order-transaction-controller
      description: Create pending transaction for order
      operationId: createOrderPendingTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogEvent"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ####################### Activities ########################

  "/v0.1/activities/search":
    post:
      tags:
        - order-activity-controller
      operationId: getOrderActivities
      description: Returns event history with order
      parameters:
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          in: query
          description: "The number of items to return"
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          description: "Sorting by data update time"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/ActivitySort"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderActivityFilter"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderActivities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/activities/byId":
    post:
      tags:
        - order-activity-controller
      operationId: getOrderActivitiesById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivitiesByIdRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderActivities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/activities/sync":
    get:
      tags:
        - order-activity-controller
      operationId: getOrderActivitiesSync
      description: Returns event history with order
      parameters:
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          in: query
          description: "The number of items to return"
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          description: "Sorting by data update time"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/SyncSort"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderActivities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/activities/reverted/sync":
    get:
      tags:
        - order-activity-controller
      operationId: getOrderRevertedActivitiesSync
      description: Returns reverted event history with order
      parameters:
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          in: query
          description: "The number of items to return"
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          description: "Sorting by data update time"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/SyncSort"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderActivities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/activities/sell/right":
    get:
      tags:
        - order-activity-controller
      operationId: getOrderSellRightActivities
      description: Returns right sell event history with order
      parameters:
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          in: query
          description: "The number of items to return"
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ids"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ###################### Aggregations ######################

  "/v0.1/aggregations/nftSellByMaker":
    get:
      tags:
        - order-aggregation-controller
      operationId: aggregateNftSellByMaker
      description: Aggregate NFT sell order by maker
      parameters:
        - name: startDate
          description: "Lower time border of data (unix format)"
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: endDate
          description: "Upper time border of data (unix format)"
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: size
          description: "The number of items to return"
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: source
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
      responses:
        '200':
          $ref: "#/components/responses/AggregationDataResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/aggregations/nftPurchaseByTaker":
    get:
      tags:
        - order-aggregation-controller
      operationId: aggregateNftPurchaseByTaker
      description: Aggregate NFT purchase by taker
      parameters:
        - name: startDate
          description: "Lower time border of data (unix format)"
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: endDate
          description: "Upper time border of data (unix format)"
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: size
          description: "The number of items to return"
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: source
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
      responses:
        '200':
          $ref: "#/components/responses/AggregationDataResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/aggregations/nftPurchaseByCollection":
    get:
      tags:
        - order-aggregation-controller
      operationId: aggregateNftPurchaseByCollection
      description: Aggregate NFT purchase by collection
      parameters:
        - name: startDate
          description: "Lower time border of data (unix format)"
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: endDate
          description: "Upper time border of data (unix format)"
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: size
          description: "The number of items to return"
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: source
          description: "The platform where the order was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
      responses:
        '200':
          $ref: "#/components/responses/AggregationDataResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

components:
  responses:
    OrderPage:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrdersPagination"
    OrderCurrenciesPage:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderCurrencies"
    OrderBidsPage:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderBidsPagination"
    AggregationDataResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AggregationData"
    OrderUpdateApiError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EthereumOrderUpdateApiError"
    OrderDataApiError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EthereumOrderDataApiError"
